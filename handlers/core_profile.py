from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from numerology import calculate_core_profile
from numerology.extended import calculate_bridges
from reports import generate_core_pdf
from ai import get_ai_analysis
from ui import build_after_analysis_keyboard
from .states import State
import tempfile


async def show_core_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get("name")
    birthdate = update.message.text.strip() if update.message else context.user_data.get("birthdate")
    context.user_data["birthdate"] = birthdate

    try:
        profile = calculate_core_profile(name, birthdate)
        context.user_data["core_profile"] = profile
        
        bridges = calculate_bridges(profile)
        context.user_data["bridges"] = bridges

        title_map = {
            "life_path": "üî¢ –ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏",
            "birthday": "üìÖ –ß–∏—Å–ª–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è",
            "expression": "üß¨ –ß–∏—Å–ª–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
            "soul": "üíñ –ß–∏—Å–ª–æ –¥—É—à–∏",
            "personality": "üé≠ –ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏"
        }

        profile_lines = [f"üîπ *–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è {name}*", f"üìÜ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}", ""]
        for key, title in title_map.items():
            profile_lines.append(f"{title}: {profile[key]}")
        await update.effective_message.reply_text("\n".join(profile_lines), parse_mode="Markdown")

        await update.effective_message.reply_text(
            "üß† –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∏ PDF-–æ—Ç—á—ë—Ç ‚Äî –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
            reply_markup=build_after_analysis_keyboard()
        )

        return State.State.EXTENDED_ANALYSIS

    except Exception as e:
        await update.effective_message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: {e}")
        return ConversationHandler.END
    

async def send_core_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get("name")
    birthdate = context.user_data.get("birthdate")
    profile = context.user_data.get("core_profile")

    if not all([name, birthdate, profile]):
        await update.message.reply_text("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞.")
        return State.State.EXTENDED_ANALYSIS

    await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —è–¥—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        interpretation = await get_ai_analysis(profile)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
        interpretation = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        generate_core_pdf(
            name=name,
            birthdate=birthdate,
            profile=profile,
            analysis=interpretation,
            output_path=tmp.name
        )

        with open(tmp.name, "rb") as pdf_file:
            await update.message.reply_document(
                document=pdf_file,
                filename="core_profile_report.pdf",
                caption="üìÑ –í–∞—à –æ—Ç—á—ë—Ç –æ —è–¥—Ä–µ –ª–∏—á–Ω–æ—Å—Ç–∏"
            )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:",
        reply_markup=build_after_analysis_keyboard()
    )

    return ConversationHandler.END
