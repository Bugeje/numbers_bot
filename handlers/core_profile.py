from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from numerology import calculate_core_profile
from reports import generate_core_pdf
from ai import get_ai_analysis
from ui import build_after_analysis_keyboard
from .states import State
from utils import (
    run_blocking, 
    parse_and_normalize,
    action_typing,
    action_upload,
    PRESETS,
    Progress
)
import tempfile
from datetime import datetime
import asyncio
import re


async def show_core_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # --- validate & normalize name ---
    def _normalize_name(raw: str) -> str:
        s = (raw or "").strip()
        s = re.sub(r"\s+", " ", s)
        if not s:
            raise ValueError("–ò–º—è –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞")
        if len(s) < 2:
            raise ValueError("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        # —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞/–ª–∞—Ç–∏–Ω–∏—Ü–∞), –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å
        if not re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë\-\s]{2,50}", s):
            raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å.")
        # Title-Case —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–µ—Ñ–∏—Å–æ–≤
        parts = []
        for token in s.split(" "):
            subtokens = [st.capitalize() for st in token.split("-") if st]
            parts.append("-".join(subtokens))
        return " ".join(parts)

    # –∏–º—è –±–µ—Ä—ë–º –∏–∑ user_data (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ), –Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
    try:
        name = _normalize_name(context.user_data.get("name"))
    except Exception as e:
        await update.effective_message.reply_text(f"‚ùå {e}\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â—ë —Ä–∞–∑:")
        return State.ASK_NAME

    # --- validate & normalize birthdate ---
    raw_birthdate = update.message.text.strip() if update.message else context.user_data.get("birthdate")
    try:
        birthdate = parse_and_normalize(raw_birthdate)
        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ
        try:
            # –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ datetime –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É,
            # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ parse_and_normalize —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            dt = datetime.strptime(birthdate, "%d.%m.%Y")
            if dt.date() > datetime.now().date():
                raise ValueError("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
        except ValueError:
            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ %d.%m.%Y ‚Äî parse_and_normalize —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            pass
    except Exception as e:
        await update.effective_message.reply_text(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {e}\n\n–ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: 24.02.1993, 24/02/1993, 1993-02-24, 24-02-1993."
        )
        return State.ASK_BIRTHDATE

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
    context.user_data["birthdate"] = birthdate

     # —Å—Ç–∞—Ä—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    await action_typing(update.effective_chat)
    progress = await Progress.start(update, PRESETS["calc_core"][0])

    # —Ä–∞—Å—á—ë—Ç —è–¥—Ä–∞ + ¬´–∞–Ω–∏–º–∞—Ü–∏—è¬ª —ç—Ç–∞–ø–∞
    await progress.animate(PRESETS["calc_core"], delay=0.35)
    try:
        profile = calculate_core_profile(name, birthdate)
        context.user_data["core_profile"] = profile
    except Exception as e:
        await progress.fail("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        await update.effective_message.reply_text(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}")
        return ConversationHandler.END

    # --- AI-–∞–Ω–∞–ª–∏–∑ (–º—è–≥–∫–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏) ---
    await action_typing(update.effective_chat)
    await progress.animate(PRESETS["ai"], delay=0.6)
    try:
        analysis = await get_ai_analysis(profile)
        if analysis.startswith("‚ùå") or analysis.startswith("[–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞"):
            analysis = "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
    except Exception:
        analysis = "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    # --- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ) ---
    await progress.set(PRESETS["pdf"][0])
    await action_upload(update.effective_chat)

    try:
        with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp:
            output_path = tmp.name

        # WeasyPrint —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ‚Äî –≤—ã–Ω–æ—Å–∏–º –∏–∑ event loop
        await run_blocking(
            generate_core_pdf,
            name=name,
            birthdate=birthdate,
            profile=profile,
            analysis=analysis,
            output_path=output_path
        )

        await progress.set(PRESETS["sending"][0])
        await action_upload(update.effective_chat)

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF
        with open(output_path, "rb") as pdf_file:
            await update.effective_message.reply_document(
                document=pdf_file,
                filename="core_profile_report.pdf",
                caption="üìÑ –í–∞—à –æ—Ç—á—ë—Ç –æ —è–¥—Ä–µ –ª–∏—á–Ω–æ—Å—Ç–∏"
            )

        await progress.finish()  # ¬´‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!¬ª + –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ

    except Exception as e:
        await update.effective_message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF: {e}\n"
            f"–Ø –º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Ñ–∞–π–ª–∞."
        )

    # --- —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    await update.effective_message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:",
        reply_markup=build_after_analysis_keyboard()
    )

    return ConversationHandler.END
    

async def send_core_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get("name")
    birthdate = context.user_data.get("birthdate")
    profile = context.user_data.get("core_profile")

    if not all([name, birthdate, profile]):
        await update.message.reply_text("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞.")
        return State.EXTENDED_ANALYSIS

    await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —è–¥—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        interpretation = await get_ai_analysis(profile)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
        interpretation = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        await run_blocking(
            generate_core_pdf,
            name=name,
            birthdate=birthdate,
            profile=profile,
            analysis=interpretation,
            output_path=tmp.name
        )

        with open(tmp.name, "rb") as pdf_file:
            await update.message.reply_document(
                document=pdf_file,
                filename="core_profile_report.pdf",
                caption="üìÑ –í–∞—à –æ—Ç—á—ë—Ç –æ —è–¥—Ä–µ –ª–∏—á–Ω–æ—Å—Ç–∏"
            )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:",
        reply_markup=build_after_analysis_keyboard()
    )

    return ConversationHandler.END
