#!/usr/bin/env python3
# test_ai_analyzer_compatibility.py
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ AIAnalyzer —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
"""

import sys
import os
import asyncio
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class MockUpdate:
    def __init__(self):
        self.effective_chat = Mock()
        self.effective_chat.id = 12345

async def test_ai_analyzer_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ AIAnalyzer —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    print("üîç –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ AIAnalyzer...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AIAnalyzer
        from helpers.ai_analyzer import AIAnalyzer, CachedAIAnalyzer, AnalysisCache
        from helpers.messages import M
        
        print("  –¢–µ—Å—Ç 1: AIAnalyzer.safe_analysis —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º")
        async def mock_ai_function_success(profile):
            return "–£—Å–ø–µ—à–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑"
        
        try:
            result = await AIAnalyzer.safe_analysis(mock_ai_function_success, {"test": "profile"})
            if result == "–£—Å–ø–µ—à–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑":
                print("    ‚úÖ AIAnalyzer —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            else:
                print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return False
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
        
        print("  –¢–µ—Å—Ç 2: AIAnalyzer.safe_analysis —Å –æ—à–∏–±–∫–æ–π")
        async def mock_ai_function_error(profile):
            raise Exception("–û—à–∏–±–∫–∞ AI")
        
        try:
            result = await AIAnalyzer.safe_analysis(mock_ai_function_error, {"test": "profile"})
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if result == M.ERRORS.AI_GENERIC:
                print("    ‚úÖ AIAnalyzer –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏")
            else:
                print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ: {result}")
                return False
        except Exception as e:
            print(f"    ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        
        print("  –¢–µ—Å—Ç 3: AIAnalyzer.safe_analysis —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ")
        async def mock_ai_function_error_custom(profile):
            raise Exception("–û—à–∏–±–∫–∞ AI")
        
        try:
            custom_error_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞"
            result = await AIAnalyzer.safe_analysis(
                mock_ai_function_error_custom, 
                {"test": "profile"},
                fallback_message=custom_error_message
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if result == custom_error_message:
                print("    ‚úÖ AIAnalyzer –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
            else:
                print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ—à–∏–±–∫–µ: {result}")
                return False
        except Exception as e:
            print(f"    ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        
        print("  –¢–µ—Å—Ç 4: AIAnalyzer.safe_analysis —Å –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º")
        async def mock_ai_function_empty(profile):
            return ""
        
        try:
            result = await AIAnalyzer.safe_analysis(mock_ai_function_empty, {"test": "profile"})
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result == M.ERRORS.AI_GENERIC:
                print("    ‚úÖ AIAnalyzer –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            else:
                print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ: {result}")
                return False
        except Exception as e:
            print(f"    ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
            
        print("  –¢–µ—Å—Ç 5: CachedAIAnalyzer")
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–µ—à –¥–ª—è —Ç–µ—Å—Ç–∞
            test_cache = AnalysisCache(max_size=5)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
            test_cache.set("mock_ai_function_success", "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", {"test": "profile"})
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞
            cached_result = test_cache.get("mock_ai_function_success", {"test": "profile"})
            if cached_result == "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
                print("    ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"    ‚ùå –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {cached_result}")
                return False
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False
            
        print("  –¢–µ—Å—Ç 6: CachedAIAnalyzer.cached_analysis —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º")
        try:
            # –ú–æ–∫–∏—Ä—É–µ–º AI —Ñ—É–Ω–∫—Ü–∏—é
            mock_ai_func = AsyncMock(return_value="–†–µ–∑—É–ª—å—Ç–∞—Ç AI")
            
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            result1 = await CachedAIAnalyzer.cached_analysis(mock_ai_func, {"test": "data"})
            
            # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
            result2 = await CachedAIAnalyzer.cached_analysis(mock_ai_func, {"test": "data"})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if mock_ai_func.call_count == 1 and result1 == result2 == "–†–µ–∑—É–ª—å—Ç–∞—Ç AI":
                print("    ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                print(f"    ‚ùå –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: –≤—ã–∑–æ–≤—ã={mock_ai_func.call_count}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç1={result1}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç2={result2}")
                return False
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return False
            
        print("  –¢–µ—Å—Ç 7: CachedAIAnalyzer.cached_analysis —Å –æ—à–∏–±–∫–æ–π –Ω–µ –∫–µ—à–∏—Ä—É–µ—Ç—Å—è")
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–µ—à –¥–ª—è —Ç–µ—Å—Ç–∞
            from helpers.ai_analyzer import analysis_cache
            original_cache = analysis_cache
            test_cache = AnalysisCache(max_size=5)
            # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π
            import helpers.ai_analyzer
            helpers.ai_analyzer.analysis_cache = test_cache
            
            # –ú–æ–∫–∏—Ä—É–µ–º AI —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
            mock_ai_func_error = AsyncMock(return_value=M.ERRORS.AI_GENERIC)
            
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            result1 = await CachedAIAnalyzer.cached_analysis(mock_ai_func_error, {"test": "data"})
            
            # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ - –¥–æ–ª–∂–µ–Ω —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é (–æ—à–∏–±–∫–∏ –Ω–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è)
            result2 = await CachedAIAnalyzer.cached_analysis(mock_ai_func_error, {"test": "data"})
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–µ—à
            helpers.ai_analyzer.analysis_cache = original_cache
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥–≤–∞–∂–¥—ã (–æ—à–∏–±–∫–∏ –Ω–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è)
            if mock_ai_func_error.call_count == 2 and result1 == result2 == M.ERRORS.AI_GENERIC:
                print("    ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –∫–µ—à–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏")
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∏ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: –≤—ã–∑–æ–≤—ã={mock_ai_func_error.call_count}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç1={result1}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç2={result2}")
                return False
        except Exception as e:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–µ—à –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                import helpers.ai_analyzer
                helpers.ai_analyzer.analysis_cache = original_cache
            except:
                pass
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ —Å –æ—à–∏–±–∫–æ–π: {e}")
            return False
            
        print("  –¢–µ—Å—Ç 8: AIAnalyzer —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º")
        try:
            update = MockUpdate()
            update.effective_chat = Mock()
            update.effective_chat.id = 12345
            
            # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            import helpers.progress
            original_action_typing = helpers.progress.action_typing
            original_progress_start = helpers.progress.Progress.start
            original_progress_animate = helpers.progress.Progress.animate
            
            helpers.progress.action_typing = AsyncMock()
            mock_progress = Mock()
            mock_progress.animate = AsyncMock()
            mock_progress.set = AsyncMock()
            mock_progress.finish = AsyncMock()
            helpers.progress.Progress.start = AsyncMock(return_value=mock_progress)
            
            # –ú–æ–∫–∏—Ä—É–µ–º AI —Ñ—É–Ω–∫—Ü–∏—é
            mock_ai_func = AsyncMock(return_value="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º")
            
            result, progress = await AIAnalyzer.analysis_with_progress(
                update, mock_ai_func, {"test": "data"}
            )
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            helpers.progress.action_typing = original_action_typing
            helpers.progress.Progress.start = original_progress_start
            helpers.progress.Progress.animate = original_progress_animate
            
            if result == "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º":
                print("    ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return False
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {e}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ AIAnalyzer")
    print("=" * 50)
    
    success = True
    
    try:
        success &= await test_ai_analyzer_compatibility()
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            print("‚úÖ AIAnalyzer –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
        else:
            print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
            print("‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    exit(0 if result else 1)