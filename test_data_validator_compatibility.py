#!/usr/bin/env python3
# test_data_validator_compatibility.py
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ DataValidator —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
"""

import sys
import os
import asyncio
from datetime import datetime
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class MockUpdate:
    def __init__(self, message_text=""):
        self.message = Mock()
        self.message.text = message_text
        self.effective_message = AsyncMock()
        self.effective_chat = Mock()

class MockContext:
    def __init__(self, user_data=None):
        self.user_data = user_data or {}

async def test_name_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏."""
    print("üîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        from helpers import normalize_name
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        from helpers.data_validator import DataValidator
        
        # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è
        update = MockUpdate()
        context = MockContext({"name": "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"})
        
        success, name = await DataValidator.validate_name(update, context)
        
        if success and name == "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
            print("‚úÖ –í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É")
        else:
            print("‚ùå –í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É")
            return False
        
        # –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
        context_invalid = MockContext({"name": "123Invalid"})
        # –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        update_invalid = MockUpdate()
        update_invalid.effective_message.reply_text = AsyncMock()
        
        success, name = await DataValidator.validate_name(update_invalid, context_invalid)
        
        if not success:
            print("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            update_invalid.effective_message.reply_text.assert_called_once()
        else:
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –Ω–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_birthdate_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."""
    print("\nüîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        from helpers.data_validator import DataValidator
        from helpers.messages import M
        
        # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞
        update = MockUpdate("01.01.1990")
        context = MockContext()
        
        # –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        update.effective_message.reply_text = AsyncMock()
        
        success, birthdate = await DataValidator.validate_birthdate(update, context)
        
        if success and birthdate == "01.01.1990":
            print("‚úÖ –í–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        else:
            print("‚ùå –í–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            return False
        
        # –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
        update_invalid = MockUpdate("invalid-date")
        update_invalid.effective_message.reply_text = AsyncMock()
        
        success, birthdate = await DataValidator.validate_birthdate(update_invalid, context)
        
        if not success:
            print("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            update_invalid.effective_message.reply_text.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            call_args = update_invalid.effective_message.reply_text.call_args[0][0]
            if M.ERRORS.DATE_PREFIX in call_args:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å")
            else:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å")
                return False
        else:
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            return False
            
        # –¢–µ—Å—Ç 3: –ë—É–¥—É—â–∞—è –¥–∞—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
        future_date = datetime.now().strftime("%d.%m.%Y")
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 1 —è–Ω–≤–∞—Ä—è, —Ç–æ 2 —è–Ω–≤–∞—Ä—è –±—É–¥–µ—Ç –±—É–¥—É—â–µ–π –¥–∞—Ç–æ–π
        day = datetime.now().day
        month = datetime.now().month
        year = datetime.now().year + 1  # –°–ª–µ–¥—É—é—â–∏–π –≥–æ–¥ —Ç–æ—á–Ω–æ –±—É–¥—É—â–∏–π
        future_date = f"01.01.{year}"
        
        update_future = MockUpdate(future_date)
        update_future.effective_message.reply_text = AsyncMock()
        
        success, birthdate = await DataValidator.validate_birthdate(update_future, context)
        
        # –î–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ–π, –ø—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–¥ –Ω–µ –ø–∞–¥–∞–µ—Ç
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥—É—â–µ–π –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_basic_profile_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."""
    print("\nüîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
    
    try:
        from helpers.data_validator import DataValidator
        from helpers.messages import M
        
        # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        update = MockUpdate()
        update.effective_message.reply_text = AsyncMock()
        
        context = MockContext({
            "name": "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "birthdate": "01.01.1990",
            "core_profile": {"life_path": "1"}
        })
        
        success, data = await DataValidator.validate_basic_profile(update, context)
        
        if success and data:
            print("‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É")
            expected_keys = {"name", "birthdate", "core_profile"}
            if set(data.keys()) == expected_keys:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {data.keys()}")
                return False
        else:
            print("‚ùå –í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É")
            return False
        
        # –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
        context_invalid = MockContext()
        update_invalid = MockUpdate()
        update_invalid.effective_message.reply_text = AsyncMock()
        
        success, data = await DataValidator.validate_basic_profile(update_invalid, context_invalid)
        
        if not success:
            print("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            update_invalid.effective_message.reply_text.assert_called_once()
            call_args = update_invalid.effective_message.reply_text.call_args[0][0]
            if M.HINTS.MISSING_BASIC_DATA in call_args:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
            else:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return False
        else:
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ DataValidator")
    print("=" * 50)
    
    success = True
    
    try:
        success &= await test_name_validation()
        success &= await test_birthdate_validation()
        success &= await test_basic_profile_validation()
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            print("‚úÖ DataValidator –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º")
        else:
            print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
            print("‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    exit(0 if result else 1)