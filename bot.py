#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import logging
import re

from config import settings
from helpers import M  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—é–¥–∞


async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞."""
    import traceback
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger = logging.getLogger(__name__)
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
    logger.error(traceback.format_exc())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å update)
    if update and update.effective_message:
        try:
            await M.send_auto_delete_error(
                update, context, 
                M.ERRORS.GENERIC_ERROR,
                delete_after=7.0
            )
        except Exception:
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    
    if not settings.telegram.token:
        print(M.ERRORS.NO_TOKEN)
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        return
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {settings.telegram.token[:10]}...")
    
    try:
        from telegram.ext import (
            ApplicationBuilder,
            CommandHandler,
            ConversationHandler,
            MessageHandler,
            filters,
        )
        from telegram.request import HTTPXRequest
        
        from flows import (
            State,
            core_profile_ai_and_pdf,
            days_conversation_handler,
            months_conversation_handler,
            receive_birthdate_text,
            receive_partner_birthdate_text,
            request_partner_name,
            save_name_and_ask_birthdate,
            save_partner_name_and_ask_birthdate,
            send_bridges_pdf,
            send_months_pdf,
            show_cycles_profile,
            show_extended_only_profile,
            start,
        )
        from helpers import BTN
        
        # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
        request = HTTPXRequest(
            read_timeout=settings.http_timeout,
            write_timeout=settings.http_timeout,
            connect_timeout=settings.http_timeout,
            pool_timeout=settings.http_timeout,
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = ApplicationBuilder().token(settings.telegram.token).request(request).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start),
                MessageHandler(filters.Regex(f"^{re.escape(BTN.RESTART)}$"), start),
            ],
            states={
                State.ASK_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, save_name_and_ask_birthdate)
                ],
                State.ASK_BIRTHDATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, receive_birthdate_text)
                ],
                State.EXTENDED_ANALYSIS: [
                    MessageHandler(filters.Regex(f"^{re.escape(BTN.PARTNER)}$"), request_partner_name),
                    MessageHandler(filters.Regex(f"^{re.escape(BTN.CORE)}$"), core_profile_ai_and_pdf),
                    MessageHandler(
                        filters.Regex(f"^{re.escape(BTN.EXTENDED)}$"), show_extended_only_profile
                    ),
                    MessageHandler(filters.Regex(f"^{re.escape(BTN.BRIDGES)}$"), send_bridges_pdf),
                    MessageHandler(filters.Regex(f"^{re.escape(BTN.CYCLES)}$"), show_cycles_profile),
                ],
                State.ASK_PARTNER_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, save_partner_name_and_ask_birthdate)
                ],
                State.ASK_PARTNER_BIRTHDATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, receive_partner_birthdate_text)
                ],
            },
            fallbacks=[MessageHandler(filters.Regex(f"^{re.escape(BTN.RESTART)}$"), start)],
        )
        
        app.add_handler(conv_handler)
        app.add_handler(days_conversation_handler)
        app.add_handler(months_conversation_handler)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN.PARTNER)}$"), request_partner_name))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN.CORE)}$"), core_profile_ai_and_pdf))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN.EXTENDED)}$"), show_extended_only_profile))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN.BRIDGES)}$"), send_bridges_pdf))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN.CYCLES)}$"), show_cycles_profile))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN.RESTART)}$"), start))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(error_handler)
        
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        import signal
        import sys
        
        async def cleanup_resources():
            """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."""
            try:
                from intelligence.engine import cleanup_client
                await cleanup_client()
                logger.info("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        
        def signal_handler(sig, frame):
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            import asyncio
            try:
                loop = asyncio.get_event_loop()
                loop.run_until_complete(cleanup_resources())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            app.run_polling()
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            import asyncio
            try:
                loop = asyncio.get_event_loop()
                loop.run_until_complete(cleanup_resources())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
        
    except Exception as e:
        print(f"{M.ERRORS.STARTUP_ERROR}: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()