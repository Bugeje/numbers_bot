#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import logging
import re
import asyncio
import signal
import sys

import httpx

from config import settings
from helpers import M  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—é–¥–∞

async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞."""
    import traceback
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger = logging.getLogger(__name__)
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
    logger.error(traceback.format_exc())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å update)
    if update and update.effective_message:
        try:
            await M.send_auto_delete_error(
                update, context, 
                M.ERRORS.GENERIC_ERROR,
                delete_after=7.0
            )
        except Exception:
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    
    if not settings.telegram.token:
        print(M.ERRORS.PREFIX + "–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        return
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {settings.telegram.token[:10]}...")
    
    try:
        from telegram.ext import (
            ApplicationBuilder,
            CommandHandler,
            ConversationHandler,
            MessageHandler,
            filters,
        )
        from telegram.request import HTTPXRequest
        
        from flows import (
            State,
            core_profile_ai_and_pdf,
            days_conversation_handler,
            months_conversation_handler,
            receive_birthdate_text,
            receive_partner_birthdate_text,
            request_partner_name,
            save_name_and_ask_birthdate,
            save_partner_name_and_ask_birthdate,
            send_bridges_pdf,
            send_months_pdf,
            show_cycles_profile,
            show_extended_only_profile,
            start,
        )
        from helpers import BTN
        
        # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        request = HTTPXRequest(
            read_timeout=settings.http_timeout,
            write_timeout=settings.http_timeout,
            connect_timeout=settings.http_timeout,
            pool_timeout=settings.http_timeout,
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        app = ApplicationBuilder().token(settings.telegram.token).request(request).concurrent_updates(True).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start),
                MessageHandler(filters.Regex(f"^{re.escape(BTN.RESTART)}$"), start),
            ],
            states={
                State.ASK_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, save_name_and_ask_birthdate)
                ],
                State.ASK_BIRTHDATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, receive_birthdate_text)
                ],
                State.EXTENDED_ANALYSIS: [
                    MessageHandler(filters.Regex(f"^{re.escape(BTN.PARTNER)}$"), request_partner_name),
                    MessageHandler(filters.Regex(f"^{re.escape(BTN.CORE)}$"), core_profile_ai_and_pdf),
                    MessageHandler(
                        filters.Regex(f"^{re.escape(BTN.EXTENDED)}$"), show_extended_only_profile
                    ),
                    MessageHandler(filters.Regex(f"^{re.escape(BTN.BRIDGES)}$"), send_bridges_pdf),
                    MessageHandler(filters.Regex(f"^{re.escape(BTN.CYCLES)}$"), show_cycles_profile),
                ],
                State.ASK_PARTNER_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, save_partner_name_and_ask_birthdate)
                ],
                State.ASK_PARTNER_BIRTHDATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, receive_partner_birthdate_text)
                ],
            },
            fallbacks=[MessageHandler(filters.Regex(f"^{re.escape(BTN.RESTART)}$"), start)],
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º conversation handler –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –æ–Ω –∏–º–µ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        app.add_handler(conv_handler, group=0)
        app.add_handler(days_conversation_handler, group=1)
        app.add_handler(months_conversation_handler, group=1)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –¥–µ–ª–∞–µ–º –∏—Ö –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –º–µ—à–∞–ª–∏ conversation states
        # –û–Ω–∏ –±—É–¥—É—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π conversation
        app.add_handler(MessageHandler(
            filters.Regex(f"^{re.escape(BTN.CORE)}$") & filters.ChatType.PRIVATE,
            core_profile_ai_and_pdf
        ), group=2)
        app.add_handler(MessageHandler(
            filters.Regex(f"^{re.escape(BTN.PARTNER)}$") & filters.ChatType.PRIVATE,
            request_partner_name
        ), group=2)
        app.add_handler(MessageHandler(
            filters.Regex(f"^{re.escape(BTN.EXTENDED)}$") & filters.ChatType.PRIVATE,
            show_extended_only_profile
        ), group=2)
        app.add_handler(MessageHandler(
            filters.Regex(f"^{re.escape(BTN.BRIDGES)}$") & filters.ChatType.PRIVATE,
            send_bridges_pdf
        ), group=2)
        app.add_handler(MessageHandler(
            filters.Regex(f"^{re.escape(BTN.CYCLES)}$") & filters.ChatType.PRIVATE,
            show_cycles_profile
        ), group=2)
        app.add_handler(MessageHandler(
            filters.Regex(f"^{re.escape(BTN.RESTART)}$") & filters.ChatType.PRIVATE,
            start
        ), group=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(error_handler)
        
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        import signal
        import sys
        
        async def cleanup_resources():
            """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."""
            try:
                logger.info("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...")
                
                # –û—á–∏—Å—Ç–∫–∞ PDF –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–≤–æ–π, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—ã
                try:
                    from helpers.pdf_queue import cleanup_pdf_queue
                    await cleanup_pdf_queue()
                    logger.info("PDF –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ PDF –æ—á–µ—Ä–µ–¥–∏: {e}")
                
                # –û—á–∏—Å—Ç–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
                try:
                    from helpers.background_tasks import cleanup_background_task_manager
                    await cleanup_background_task_manager()
                    logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
                
                # –û—á–∏—Å—Ç–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤
                try:
                    from intelligence.engine import cleanup_client
                    await cleanup_client()
                    logger.info("HTTP –∫–ª–∏–µ–Ω—Ç—ã –æ—á–∏—â–µ–Ω—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
                
                logger.info("–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        
        def signal_handler(sig, frame):
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            import asyncio
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop
                try:
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –ï—Å–ª–∏ event loop –∑–∞–ø—É—â–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫
                        future = asyncio.run_coroutine_threadsafe(cleanup_resources(), loop)
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        try:
                            future.result(timeout=5.0)
                        except:
                            pass
                    else:
                        # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                        loop.run_until_complete(cleanup_resources())
                except RuntimeError:
                    # –ï—Å–ª–∏ event loop –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    asyncio.run(cleanup_resources())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            app.run_polling()
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            try:
                logger.info("–ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...")
                import asyncio
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ event loop
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –ï—Å–ª–∏ event loop –∑–∞–ø—É—â–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫
                        future = asyncio.run_coroutine_threadsafe(cleanup_resources(), loop)
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        try:
                            future.result(timeout=5.0)
                        except:
                            pass
                    else:
                        # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                        loop.run_until_complete(cleanup_resources())
                except RuntimeError:
                    # –ï—Å–ª–∏ event loop –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    asyncio.run(cleanup_resources())
                except Exception as e:
                    # Handle any other exceptions during cleanup
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
                logger.info("–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
        
    except Exception as e:
        print(f"{M.ERRORS.PREFIX}–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()