#!/usr/bin/env python3
# test_ai_integration_simple.py
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AIAnalyzer.
"""

import sys
import os
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_ai_analyzer_with_real_functions():
    """–¢–µ—Å—Ç AIAnalyzer —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    print("üîç –¢–µ—Å—Ç AIAnalyzer —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AIAnalyzer
        from helpers.ai_analyzer import AIAnalyzer, CachedAIAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_profile = {
            "life_path": "1",
            "birthday": "1", 
            "expression": "2",
            "soul": "3",
            "personality": "4"
        }
        
        print("  –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AI —Ñ—É–Ω–∫—Ü–∏–π")
        try:
            from intelligence import get_ai_analysis
            print("    ‚úÖ AI —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AI —Ñ—É–Ω–∫—Ü–∏–π (–æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ): {e}")
            return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
        
        print("  –¢–µ—Å—Ç 2: AIAnalyzer —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π")
        async def mock_ai_function(data):
            return "–¢–µ—Å—Ç–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑"
        
        result = await AIAnalyzer.safe_analysis(mock_ai_function, test_profile)
        if result == "–¢–µ—Å—Ç–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑":
            print("    ‚úÖ AIAnalyzer —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π")
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return False
            
        print("  –¢–µ—Å—Ç 3: CachedAIAnalyzer —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π")
        result1 = await CachedAIAnalyzer.cached_analysis(mock_ai_function, test_profile)
        result2 = await CachedAIAnalyzer.cached_analysis(mock_ai_function, test_profile)
        
        if result1 == result2 == "–¢–µ—Å—Ç–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑":
            print("    ‚úÖ CachedAIAnalyzer —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏: {result1}, {result2}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AIAnalyzer")
    print("=" * 50)
    
    success = True
    
    try:
        success &= await test_ai_analyzer_with_real_functions()
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
            print("‚úÖ AIAnalyzer –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å flow —Ñ–∞–π–ª–∞–º–∏")
        else:
            print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    exit(0 if result else 1)