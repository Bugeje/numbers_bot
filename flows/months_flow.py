import tempfile
import os
from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes

from calc.cycles import MONTH_NAMES, generate_personal_month_cycle_table, calculate_personal_year
from calc import calculate_core_profile
from intelligence import get_months_year_analysis
from output import create_months_year_report_pdf
from interface import build_after_analysis_keyboard
from helpers import M, MessageManager, Progress, action_typing, action_upload, run_blocking


async def send_months_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_manager = MessageManager(context)
    await msg_manager.cleanup_tracked_messages()
    
    name = context.user_data.get("name")
    birthdate = context.user_data.get("birthdate")
    core_profile = context.user_data.get("core_profile")

    if not name or not birthdate:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
        return

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º core_profile, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not core_profile:
        try:
            core_profile = calculate_core_profile(name, birthdate)
            context.user_data["core_profile"] = core_profile
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ AI
            core_profile = None

    # --- –ø—Ä–æ–≥—Ä–µ—Å—Å: —Ä–∞—Å—á—ë—Ç—ã ---
    await action_typing(update.effective_chat)
    progress = await Progress.start(update, "üìÜ –ì–æ—Ç–æ–≤–ª—é –∞–Ω–∞–ª–∏–∑ –º–µ—Å—è—Ü–µ–≤...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∫–∞–∫ —Ü–µ–ª–µ–≤–æ–π –≥–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    target_year = datetime.today().year
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –≥–æ–¥–∞
    personal_year_str = calculate_personal_year(birthdate, target_year)
    personal_year = int(personal_year_str.split('(')[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞
    raw_month_cycles = generate_personal_month_cycle_table()
    months_data = [str(raw_month_cycles[personal_year][m]) for m in MONTH_NAMES]
    month_cycles = {str(k): [str(v[m]) for m in MONTH_NAMES] for k, v in raw_month_cycles.items()}

    # --- –ø—Ä–æ–≥—Ä–µ—Å—Å: AI-–∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å) ---
    ai_analysis = None
    if core_profile:
        await progress.set("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é AI-–∞–Ω–∞–ª–∏–∑ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ü–µ–ª–µ–≤–æ–π –≥–æ–¥, —á—Ç–æ –∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞
            ai_analysis = await get_months_year_analysis(
                profile=core_profile,
                birthdate=birthdate,
                personal_year=personal_year,
                year=target_year,
            )
            if isinstance(ai_analysis, str) and ai_analysis.startswith("‚ùå"):
                ai_analysis = M.ERRORS.AI_GENERIC
        except Exception:
            ai_analysis = M.ERRORS.AI_GENERIC

    # --- –ø—Ä–æ–≥—Ä–µ—Å—Å: PDF ---
    await progress.set(M.PROGRESS.PDF_ONE)
    await action_upload(update.effective_chat)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            tmp_path = tmp.name
            
            if ai_analysis and ai_analysis != M.ERRORS.AI_GENERIC:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
                await run_blocking(
                    create_months_year_report_pdf, 
                    name, 
                    birthdate, 
                    target_year,
                    personal_year,
                    months_data, 
                    core_profile,
                    ai_analysis,
                    tmp_path
                )
                filename = "–ê–Ω–∞–ª–∏–∑_–º–µ—Å—è—Ü–µ–≤_—Å_–ò–ò.pdf"
                caption = M.CAPTION.MONTHS_YEAR
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —à–∞–±–ª–æ–Ω, –Ω–æ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π
                await run_blocking(
                    create_months_year_report_pdf, 
                    name, 
                    birthdate, 
                    target_year,
                    personal_year,
                    months_data, 
                    core_profile,
                    ai_analysis or "–û—à–∏–±–∫–∞: AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    tmp_path
                )
                filename = "–ê–Ω–∞–ª–∏–∑_–º–µ—Å—è—Ü–µ–≤.pdf"
                caption = M.CAPTION.MONTHS

            await progress.set(M.PROGRESS.SENDING_ONE)
            await action_upload(update.effective_chat)

            with open(tmp_path, "rb") as pdf_file:
                await update.message.reply_document(
                    document=pdf_file, 
                    filename=filename,
                    caption=caption
                )

        # Cleanup temporary file
        try:
            os.unlink(tmp_path)
        except Exception:
            pass  # Ignore cleanup errors

        await progress.finish()
    except Exception:
        await progress.fail(M.ERRORS.PDF_FAIL)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç—Ä–µ–∫–∞–µ–º)
    await msg_manager.send_and_track(
        update, M.HINTS.NEXT_STEP, reply_markup=build_after_analysis_keyboard()
    )

