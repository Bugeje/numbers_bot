# helpers/keyboards.py
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä - —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫.
"""
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional, Union
from helpers.messages import BTN


class KeyboardBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞."""
    
    @staticmethod
    def create_reply_keyboard(
        buttons: List[Union[str, List[str]]], 
        resize_keyboard: bool = True,
        one_time_keyboard: bool = False,
        selective: bool = False
    ) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä—è–¥–æ–≤
            resize_keyboard: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–æ–≥–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä
            one_time_keyboard: –°–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            selective: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        keyboard = []
        
        for button in buttons:
            if isinstance(button, list):
                # –†—è–¥ –∫–Ω–æ–ø–æ–∫
                keyboard.append([KeyboardButton(text) for text in button])
            else:
                # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
                keyboard.append([KeyboardButton(button)])
        
        return ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=resize_keyboard,
            one_time_keyboard=one_time_keyboard,
            selective=selective
        )
    
    @staticmethod
    def create_inline_keyboard(
        buttons: List[Union[dict, List[dict]]]
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞ {"text": "–¢–µ–∫—Å—Ç", "callback_data": "data"}
                    –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Ä—è–¥–æ–≤
        """
        keyboard = []
        
        for button in buttons:
            if isinstance(button, list):
                # –†—è–¥ –∫–Ω–æ–ø–æ–∫
                row = []
                for btn in button:
                    if "url" in btn:
                        row.append(InlineKeyboardButton(btn["text"], url=btn["url"]))
                    else:
                        row.append(InlineKeyboardButton(btn["text"], callback_data=btn["callback_data"]))
                keyboard.append(row)
            else:
                # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
                if "url" in button:
                    keyboard.append([InlineKeyboardButton(button["text"], url=button["url"])])
                else:
                    keyboard.append([InlineKeyboardButton(button["text"], callback_data=button["callback_data"])])
        
        return InlineKeyboardMarkup(keyboard)


class StandardKeyboards:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    
    @staticmethod
    def after_analysis_keyboard() -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ - –∑–∞–º–µ–Ω—è–µ—Ç build_after_analysis_keyboard()."""
        buttons = [
            [BTN.CORE, BTN.PARTNER],
            [BTN.EXTENDED, BTN.BRIDGES],
            [BTN.CYCLES, BTN.MONTHS],
            [BTN.CALENDAR_DAYS],
            [BTN.RESTART]
        ]
        return KeyboardBuilder.create_reply_keyboard(buttons)
    
    @staticmethod
    def main_menu_keyboard() -> ReplyKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        buttons = [
            [BTN.CORE],
            [BTN.EXTENDED, BTN.BRIDGES],
            [BTN.CYCLES, BTN.PARTNER],
            [BTN.RESTART]
        ]
        return KeyboardBuilder.create_reply_keyboard(buttons)
    
    @staticmethod
    def profile_analysis_keyboard() -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è."""
        buttons = [
            [BTN.CORE],
            [BTN.EXTENDED, BTN.BRIDGES],
            [BTN.RESTART]
        ]
        return KeyboardBuilder.create_reply_keyboard(buttons)
    
    @staticmethod
    def cycles_analysis_keyboard() -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏–∫–ª–æ–≤."""
        buttons = [
            ["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–Ω–µ–π", "üìä –ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—Ü–µ–≤"],
            [BTN.CYCLES],
            [BTN.RESTART]
        ]
        return KeyboardBuilder.create_reply_keyboard(buttons)


class KeyboardUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏."""
    
    @staticmethod
    def add_restart_button(keyboard: ReplyKeyboardMarkup) -> ReplyKeyboardMarkup:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É Restart –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."""
        new_keyboard = keyboard.keyboard.copy()
        new_keyboard.append([KeyboardButton(BTN.RESTART)])
        
        return ReplyKeyboardMarkup(
            new_keyboard,
            resize_keyboard=keyboard.resize_keyboard,
            one_time_keyboard=keyboard.one_time_keyboard,
            selective=keyboard.selective
        )
    
    @staticmethod
    def create_numbered_buttons(items: List[str], prefix: str = "") -> List[str]:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        return [f"{prefix}{i+1}. {item}" for i, item in enumerate(items)]
    
    @staticmethod
    def create_grid_keyboard(
        buttons: List[str], 
        columns: int = 2
    ) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏."""
        rows = []
        for i in range(0, len(buttons), columns):
            row = buttons[i:i+columns]
            rows.append(row)
        
        return KeyboardBuilder.create_reply_keyboard(rows)
    
    @staticmethod
    def create_yes_no_keyboard(
        yes_text: str = "‚úÖ –î–∞", 
        no_text: str = "‚ùå –ù–µ—Ç"
    ) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –î–∞/–ù–µ—Ç."""
        return KeyboardBuilder.create_reply_keyboard([[yes_text, no_text]])


# –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def build_after_analysis_keyboard() -> ReplyKeyboardMarkup:
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    return StandardKeyboards.after_analysis_keyboard()


def build_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ê–ª–∏–∞—Å –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return StandardKeyboards.main_menu_keyboard()