#!/usr/bin/env python3
# test_bridges_flow_ai_integration.py
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AIAnalyzer —Å bridges_flow.
"""

import sys
import os
import asyncio
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class MockUpdate:
    def __init__(self):
        self.effective_message = AsyncMock()
        self.effective_chat = Mock()
        self.effective_chat.id = 12345

class MockContext:
    def __init__(self, user_data=None):
        self.user_data = user_data or {}

async def test_bridges_flow_ai_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AIAnalyzer —Å bridges_flow."""
    print("üîç –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AIAnalyzer —Å bridges_flow...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bridges_flow
        from flows.bridges_flow import send_bridges_pdf
        from intelligence import get_bridges_analysis
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        update = MockUpdate()
        context = MockContext({
            "name": "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "birthdate": "01.01.1990",
            "core_profile": {
                "life_path": "1",
                "birthday": "1",
                "expression": "2",
                "soul": "3",
                "personality": "4"
            },
            "extended_profile": {
                "maturity": "5",
                "rational_thought": "6",
                "imagination": "7",
                "career": "8",
                "inner_dreams": "9",
                "outer_dreams": "1",
                "illness": "2",
                "talent": "3"
            }
        })
        
        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        import helpers.progress
        original_action_typing = helpers.progress.action_typing
        original_action_upload = helpers.progress.action_upload
        original_progress_start = helpers.progress.Progress.start
        original_progress_animate = helpers.progress.Progress.animate
        original_progress_set = helpers.progress.Progress.set
        original_progress_finish = helpers.progress.Progress.finish
        
        helpers.progress.action_typing = AsyncMock()
        helpers.progress.action_upload = AsyncMock()
        mock_progress = Mock()
        mock_progress.animate = AsyncMock()
        mock_progress.set = AsyncMock()
        mock_progress.finish = AsyncMock()
        helpers.progress.Progress.start = AsyncMock(return_value=mock_progress)
        
        # –ú–æ–∫–∏—Ä—É–µ–º MessageManager
        import helpers
        original_message_manager = helpers.MessageManager
        helpers.MessageManager = Mock()
        helpers.MessageManager.return_value.cleanup_tracked_messages = AsyncMock()
        helpers.MessageManager.return_value.send_navigation_message = AsyncMock()
        
        # –ú–æ–∫–∏—Ä—É–µ–º AI —Ñ—É–Ω–∫—Ü–∏—é
        import intelligence.analysis
        original_get_bridges_analysis = intelligence.analysis.get_bridges_analysis
        intelligence.analysis.get_bridges_analysis = AsyncMock(return_value="–ê–Ω–∞–ª–∏–∑ –º–æ—Å—Ç–æ–≤")
        
        # –ú–æ–∫–∏—Ä—É–µ–º PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        import output
        original_generate_bridges_pdf = output.generate_bridges_pdf
        output.generate_bridges_pdf = Mock()
        
        # –ú–æ–∫–∏—Ä—É–µ–º tempfile
        import tempfile
        original_tempfile = tempfile.NamedTemporaryFile
        tempfile.NamedTemporaryFile = Mock()
        tempfile.NamedTemporaryFile.return_value.__enter__ = Mock(return_value=Mock())
        tempfile.NamedTemporaryFile.return_value.__exit__ = Mock(return_value=None)
        tempfile.NamedTemporaryFile.return_value.name = "/tmp/test.pdf"
        
        # –ú–æ–∫–∏—Ä—É–µ–º open –∏ os.unlink
        import builtins
        original_open = builtins.open
        builtins.open = Mock()
        mock_file = Mock()
        builtins.open.return_value.__enter__ = Mock(return_value=mock_file)
        builtins.open.return_value.__exit__ = Mock(return_value=None)
        
        import os
        original_os_unlink = os.unlink
        os.unlink = Mock()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
            result = await send_bridges_pdf(update, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result == -1:  # ConversationHandler.END
                print("    ‚úÖ Bridges flow —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            else:
                print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
            if intelligence.analysis.get_bridges_analysis.call_count > 0:
                print("    ‚úÖ AI –∞–Ω–∞–ª–∏–∑ –º–æ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            else:
                print("    ‚ùå AI –∞–Ω–∞–ª–∏–∑ –º–æ—Å—Ç–æ–≤ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")
                return False
                
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            helpers.progress.action_typing = original_action_typing
            helpers.progress.action_upload = original_action_upload
            helpers.progress.Progress.start = original_progress_start
            helpers.progress.Progress.animate = original_progress_animate
            helpers.progress.Progress.set = original_progress_set
            helpers.progress.Progress.finish = original_progress_finish
            
            helpers.MessageManager = original_message_manager
            
            intelligence.analysis.get_bridges_analysis = original_get_bridges_analysis
            output.generate_bridges_pdf = original_generate_bridges_pdf
            tempfile.NamedTemporaryFile = original_tempfile
            builtins.open = original_open
            os.unlink = original_os_unlink
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AIAnalyzer —Å bridges_flow")
    print("=" * 50)
    
    success = True
    
    try:
        success &= await test_bridges_flow_ai_integration()
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω!")
            print("‚úÖ Bridges flow —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å AIAnalyzer")
        else:
            print("üí• –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω!")
            print("‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    exit(0 if result else 1)