def profile_prompt(profile: dict) -> str:
    return (
        f"–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: {profile.get('life_path', '‚Äì')}\n"
        f"–ß–∏—Å–ª–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {profile.get('birthday', '‚Äì')}\n"
        f"–ß–∏—Å–ª–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {profile.get('expression', '‚Äì')}\n"
        f"–ß–∏—Å–ª–æ –¥—É—à–∏: {profile.get('soul', '‚Äì')}\n"
        f"–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: {profile.get('personality', '‚Äì')}\n\n"
    )


def extended_prompt(extended: dict) -> str:
    return (
        f"üìå –†–∞–≤–Ω–æ–≤–µ—Å–∏–µ: {extended.get('balance', '‚Äì')}\n"
        f"üìå –†–æ—Å—Ç: {extended.get('growth', '‚Äì')}\n"
        f"üìå –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: {extended.get('realization', '‚Äì')}\n"
        f"üìå –†–∞–∑—É–º: {extended.get('mind', '‚Äì')}\n\n"
    )


def bridges_prompt(bridges: dict) -> str:
    return (
        f"–ú–æ—Å—Ç –í—ã—Ä–∞–∂–µ–Ω–∏–µ‚Äî–î—É—à–∞: {bridges.get('expression_soul', '‚Äì')}\n"
        f"–ú–æ—Å—Ç –î—É—à–∞‚Äî–õ–∏—á–Ω–æ—Å—Ç—å: {bridges.get('soul_personality', '‚Äì')}\n"
        f"–ú–æ—Å—Ç –ü—É—Ç—å‚Äî–î—É—à–∞: {bridges.get('life_soul', '‚Äì')}\n"
        f"–ú–æ—Å—Ç –ü—É—Ç—å‚Äî–õ–∏—á–Ω–æ—Å—Ç—å: {bridges.get('life_personality', '‚Äì')}\n\n"
    )


def compatibility_prompt(profile_a: dict, profile_b: dict) -> str:
    return (
        f"–ü–∞—Ä—Ç–Ω—ë—Ä A:\n"
        f"  –ñ–ü: {profile_a.get('life_path', '‚Äì')}  –î–µ–Ω—å: {profile_a.get('birthday', '‚Äì')}\n"
        f"  –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {profile_a.get('expression', '‚Äì')}  –î—É—à–∞: {profile_a.get('soul', '‚Äì')}  –õ–∏—á–Ω–æ—Å—Ç—å: {profile_a.get('personality', '‚Äì')}\n\n"
        f"–ü–∞—Ä—Ç–Ω—ë—Ä B:\n"
        f"  –ñ–ü: {profile_b.get('life_path', '‚Äì')}  –î–µ–Ω—å: {profile_b.get('birthday', '‚Äì')}\n"
        f"  –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {profile_b.get('expression', '‚Äì')}  –î—É—à–∞: {profile_b.get('soul', '‚Äì')}  –õ–∏—á–Ω–æ—Å—Ç—å: {profile_b.get('personality', '‚Äì')}\n\n"
    )


def days_prompt(
    month_name: str,
    personal_month: int,
    single_components: list[str],
    gradients: list[str],
    fusion_groups: list[str],
) -> str:
    legend = {
        "match-life_path": "üü•",
        "match-expression": "üü¶",
        "match-soul": "üü£",
        "match-personality": "üü®",
        "match-birthday": "üü©",
    }

    basic_colors = [legend.get(key, "") for key in single_components if key in legend]

    fusion_blocks = []
    for group in fusion_groups:
        parts = group.split("+")
        colors = [legend.get(part, "") for part in parts]
        if all(colors):
            fusion_blocks.append("".join(colors))

    text = f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –º–µ—Å—è—Ü: {month_name}\n" f"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü: {personal_month}\n"

    if basic_colors:
        text += f"\n–¶–≤–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –º–µ—Å—è—Ü–∞: {', '.join(basic_colors)}"

    if fusion_blocks:
        text += "\n\n–°–ª–∏—è–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–º–µ–Ω—Ç—ã –º–µ—Å—è—Ü–∞:\n"
        for fusion in fusion_blocks:
            text += f"- {fusion}\n"

    return text.strip()


from helpers.i18n import RU_MONTHS_FULL


def cycles_prompt(
    name: str,
    birthdate: str,
    life_path: str,
    personal_years: list,
    pinnacles: list,
    personal_year_blocks: dict
) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤."""
    from datetime import datetime
    current_year = datetime.now().year
    
    # –¢–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥
    for year_info in personal_years:
        if year_info['year'] == current_year:
            current_personal_year = year_info['personal_year']
            break
    else:
        current_personal_year = "‚Äî"
    
    prompt_lines = [
        f"–§–ò–û: {name}",
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}",
        f"–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: {life_path}",
        f"–¢–µ–∫—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–æ–¥: {current_year}",
        f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥: {current_personal_year}"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏–∫–∞—Ö
    prompt_lines.append("\n–ß–µ—Ç—ã—Ä–µ –ø–∏–∫–∞ (Pinnacles):")
    for i, pinnacle in enumerate(pinnacles, 1):
        start_age = pinnacle.get('start_age', '‚Äî')
        end_age = pinnacle.get('end_age', '‚Äî')
        number = pinnacle.get('number', '‚Äî')
        prompt_lines.append(f"–ü–∏–∫ {i}: —á–∏—Å–ª–æ {number}, –≤–æ–∑—Ä–∞—Å—Ç {start_age}-{end_age} –ª–µ—Ç")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç + —Å–ª–µ–¥—É—é—â–∏–µ 5)
    prompt_lines.append("\n–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ–¥—ã (—Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥):")
    years_around_current = []
    for year_info in personal_years:
        year = year_info['year']
        if current_year - 5 <= year <= current_year + 5:
            years_around_current.append(year_info)
    
    for year_info in years_around_current:
        year = year_info['year']
        personal_year = year_info['personal_year']
        marker = " ‚Üê –¢–ï–ö–£–©–ò–ô" if year == current_year else ""
        prompt_lines.append(f"{year}: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥ {personal_year}{marker}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö –ª–µ—Ç
    prompt_lines.append("\n–ë–ª–æ–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ª–µ—Ç –ø–æ –ø–∏–∫–∞–º:")
    for peak_num, years_list in personal_year_blocks.items():
        prompt_lines.append(f"–ü–∏–∫ {peak_num}: {', '.join(map(str, years_list))}")
    
    return "\n".join(prompt_lines)


def months_year_prompt(personal_year: int, months_map: dict[int,int], matches_map: dict[int,list[str]]) -> str:
    """
    personal_year: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8)
    months_map: {1..12 -> personal_month_number}
    matches_map: {1..12 -> ["match-life_path", "match-expression", ...]}
    """
    lines = [f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥: {personal_year}"]
    for m in range(1, 13):
        pm = months_map.get(m, "-")
        tags = matches_map.get(m, [])
        tag_txt = ", ".join(tags) if tags else "‚Äî"
        lines.append(f"{RU_MONTHS_FULL[m]}: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü {pm}; —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {tag_txt}")
    return "\n".join(lines) + "\n"
