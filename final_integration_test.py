#!/usr/bin/env python3
# final_integration_test.py
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_all_components():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    components_to_test = [
        ("helpers.keyboards", "StandardKeyboards, KeyboardBuilder, KeyboardUtils"),
        ("helpers.data_validator", "DataValidator, ValidationResult"),
        ("helpers.ai_analyzer", "AIAnalyzer, CachedAIAnalyzer"),
        ("helpers.error_handler", "ErrorHandler, FlowErrorHandler"),
        ("helpers.pdf_flow_base", "BasePDFFlow")
    ]
    
    success = True
    
    for module_path, components in components_to_test:
        try:
            module = __import__(module_path, fromlist=[''])
            print(f"‚úÖ {module_path} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            for component in components.split(", "):
                if hasattr(module, component):
                    print(f"   ‚úÖ {component} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"   ‚ùå {component} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    success = False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_path}: {e}")
            success = False
    
    return success

def test_flow_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤–æ flow —Ñ–∞–π–ª–∞—Ö."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–æ flow —Ñ–∞–π–ª–∞—Ö...")
    
    flow_files = [
        "flows.extended_flow",
        "flows.bridges_flow", 
        "flows.profile_flow",
        "flows.partner_flow",
        "flows.cycles_flow"
    ]
    
    success = True
    
    for flow_path in flow_files:
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º flow
            flow_module = __import__(flow_path, fromlist=[''])
            print(f"‚úÖ {flow_path} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if hasattr(flow_module, 'show_extended_only_profile') or hasattr(flow_module, 'send_bridges_pdf'):
                print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            elif hasattr(flow_module, 'core_profile_ai_and_pdf') or hasattr(flow_module, 'show_cycles_profile'):
                print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {flow_path}: {e}")
            success = False
    
    return success

def test_keyboard_consistency():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
        from interface.menus import build_after_analysis_keyboard as old_keyboard
        old_kb = old_keyboard()
        
        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±
        from helpers.keyboards import StandardKeyboards
        new_kb = StandardKeyboards.after_analysis_keyboard()
        
        # –ê–ª–∏–∞—Å
        from helpers.keyboards import build_after_analysis_keyboard as alias_keyboard
        alias_kb = alias_keyboard()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        old_structure = [[btn.text.strip() for btn in row] for row in old_kb.keyboard]
        new_structure = [[btn.text.strip() for btn in row] for row in new_kb.keyboard]
        alias_structure = [[btn.text.strip() for btn in row] for row in alias_kb.keyboard]
        
        if old_structure == new_structure == alias_structure:
            print("‚úÖ –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
            print(f"   –†—è–¥–æ–≤: {len(old_structure)}")
            for i, row in enumerate(old_structure):
                print(f"   –†—è–¥ {i+1}: {row}")
            return True
        else:
            print("‚ùå –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
            print(f"   –°—Ç–∞—Ä–∞—è: {old_structure}")
            print(f"   –ù–æ–≤–∞—è: {new_structure}")
            print(f"   –ê–ª–∏–∞—Å: {alias_structure}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_no_circular_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    modules_to_test = [
        "helpers",
        "helpers.keyboards",
        "helpers.data_validator",
        "helpers.ai_analyzer",
        "helpers.error_handler",
        "helpers.pdf_flow_base",
        "flows.extended_flow",
        "flows.bridges_flow"
    ]
    
    success = True
    
    for module_path in modules_to_test:
        try:
            module = __import__(module_path, fromlist=[''])
            print(f"‚úÖ {module_path} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        except ImportError as e:
            if "circular import" in str(e):
                print(f"‚ùå –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤ {module_path}: {e}")
                success = False
            else:
                print(f"‚ö†Ô∏è  –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ {module_path}: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_path}: {e}")
            success = False
    
    return success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 50)
    
    overall_success = True
    
    try:
        # –¢–µ—Å—Ç 1: –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        overall_success &= test_all_components()
        
        # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–æ flow
        overall_success &= test_flow_integration()
        
        # –¢–µ—Å—Ç 3: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        overall_success &= test_keyboard_consistency()
        
        # –¢–µ—Å—Ç 4: –ù–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        overall_success &= test_no_circular_imports()
        
        print("\n" + "=" * 50)
        if overall_success:
            print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("\n‚úÖ –ì–û–¢–û–í–û –ö –ü–ï–†–í–û–ú–£ –≠–¢–ê–ü–£ –í–ù–ï–î–†–ï–ù–ò–Ø!")
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞:")
            print("   ‚úÖ KeyboardBuilder –∏ StandardKeyboards")
            print("   ‚úÖ –í—Å–µ flow —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            print("   ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            print("   ‚úÖ –ù–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ DataValidator –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            print("   2. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ AIAnalyzer –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ AI –≤—ã–∑–æ–≤–æ–≤")
            print("   3. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ ErrorHandler –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
            print("   4. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫ BasePDFFlow")
        else:
            print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
            print("‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        overall_success = False
    
    return overall_success

if __name__ == "__main__":
    result = main()
    exit(0 if result else 1)