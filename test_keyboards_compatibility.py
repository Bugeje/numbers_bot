# test_keyboards_compatibility.py
"""
–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–µ KeyboardBuilder
—Å–æ–∑–¥–∞—é—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∫–∞–∫ –∏ —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_keyboard_compatibility():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    from interface.menus import build_after_analysis_keyboard as old_keyboard
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    from helpers.keyboards import StandardKeyboards
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    old_kb = old_keyboard()
    new_kb = StandardKeyboards.after_analysis_keyboard()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print(f"–°—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(old_kb.keyboard)} —Ä—è–¥–æ–≤")
    print(f"–ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(new_kb.keyboard)} —Ä—è–¥–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä—è–¥
    if len(old_kb.keyboard) != len(new_kb.keyboard):
        print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
        return False
    
    for i, (old_row, new_row) in enumerate(zip(old_kb.keyboard, new_kb.keyboard)):
        print(f"\n–†—è–¥ {i+1}:")
        old_texts = [btn.text for btn in old_row]
        new_texts = [btn.text for btn in new_row]
        
        print(f"  –°—Ç–∞—Ä—ã–π: {old_texts}")
        print(f"  –ù–æ–≤—ã–π:  {new_texts}")
        
        if old_texts != new_texts:
            print(f"  ‚ùå –†—è–¥ {i+1} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            return False
        else:
            print(f"  ‚úÖ –†—è–¥ {i+1} –∏–¥–µ–Ω—Ç–∏—á–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if old_kb.resize_keyboard != new_kb.resize_keyboard:
        print(f"‚ùå resize_keyboard –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {old_kb.resize_keyboard} vs {new_kb.resize_keyboard}")
        return False
    
    print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã.")
    return True


def test_alias_compatibility():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–∏–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–ª–∏–∞—Å –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    from helpers.keyboards import build_after_analysis_keyboard as alias_keyboard
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    from interface.menus import build_after_analysis_keyboard as old_keyboard
    
    old_kb = old_keyboard()
    alias_kb = alias_keyboard()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    old_structure = [[btn.text for btn in row] for row in old_kb.keyboard]
    alias_structure = [[btn.text for btn in row] for row in alias_kb.keyboard]
    
    if old_structure == alias_structure:
        print("‚úÖ –ê–ª–∏–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ùå –ê–ª–∏–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"–°—Ç–∞—Ä—ã–π: {old_structure}")
        print(f"–ê–ª–∏–∞—Å: {alias_structure}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("=" * 50)
    
    success = True
    
    try:
        success = test_keyboard_compatibility() and success
        success = test_alias_compatibility() and success
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–∂–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        else:
            print("üí• –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´! –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.")
            
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    exit(0 if success else 1)