#!/usr/bin/env python3
"""
AI Diagnostics Tool for Numbers Bot
Helps diagnose and troubleshoot AI analysis errors.
"""

import asyncio
import json
import logging
import sys
import os
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import settings
from intelligence.engine import ask_openrouter
from intelligence.analysis import get_ai_analysis
from intelligence.prompts import profile_prompt
from intelligence.system_prompts import SYSTEM_PROMPTS
from calc.profile import calculate_core_profile
from helpers.http_pool import get_http_pool
from helpers.concurrency import get_concurrency_manager


class AIDiagnostics:
    """AI system diagnostics and troubleshooting."""
    
    def __init__(self):
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "tests": {},
            "overall_status": "unknown"
        }
    
    async def run_full_diagnostics(self) -> dict:
        """Run complete AI diagnostics."""
        print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ AI —Å–∏—Å—Ç–µ–º—ã...")
        print("=" * 60)
        
        # Configuration check
        await self._test_configuration()
        
        # HTTP client pool check
        await self._test_http_pool()
        
        # Concurrency manager check
        await self._test_concurrency()
        
        # OpenRouter API connectivity
        await self._test_api_connectivity()
        
        # End-to-end analysis test
        await self._test_end_to_end_analysis()
        
        # Performance test
        await self._test_performance()
        
        # Summary
        self._generate_summary()
        
        return self.results
    
    async def _test_configuration(self):
        """Test configuration settings."""
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        test_result = {
            "status": "success",
            "details": {},
            "errors": []
        }
        
        # Check API key
        if not settings.ai.openrouter_api_key:
            test_result["status"] = "error"
            test_result["errors"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENROUTER_API_KEY")
        else:
            key_preview = settings.ai.openrouter_api_key[:10] + "..."
            test_result["details"]["api_key"] = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({key_preview})"
        
        # Check other settings
        test_result["details"]["base_url"] = settings.ai.openrouter_base_url
        test_result["details"]["model"] = settings.ai.model
        test_result["details"]["temperature"] = settings.ai.temperature
        test_result["details"]["max_tokens"] = settings.ai.max_tokens
        test_result["details"]["timeout"] = settings.ai.timeout
        
        # Check concurrency settings
        test_result["details"]["ai_semaphore_limit"] = settings.ai_semaphore_limit
        test_result["details"]["http_timeout"] = settings.http_timeout
        
        self.results["tests"]["configuration"] = test_result
        
        if test_result["status"] == "success":
            print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {', '.join(test_result['errors'])}")
    
    async def _test_http_pool(self):
        """Test HTTP client pool."""
        print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –ø—É–ª–∞...")
        
        test_result = {
            "status": "success",
            "details": {},
            "errors": []
        }
        
        try:
            http_pool = await get_http_pool()
            health = await http_pool.health_check()
            
            test_result["details"]["pool_status"] = health["status"]
            test_result["details"]["healthy_clients"] = health["healthy_clients"]
            test_result["details"]["total_clients"] = health["total_clients"]
            test_result["details"]["health_percentage"] = health["health_percentage"]
            
            if health["health_percentage"] < 100:
                test_result["status"] = "warning"
                test_result["errors"].append(f"–ù–µ –≤—Å–µ HTTP –∫–ª–∏–µ–Ω—Ç—ã –∑–¥–æ—Ä–æ–≤—ã ({health['health_percentage']:.1f}%)")
            
        except Exception as e:
            test_result["status"] = "error"
            test_result["errors"].append(f"–û—à–∏–±–∫–∞ HTTP –ø—É–ª–∞: {e}")
        
        self.results["tests"]["http_pool"] = test_result
        
        if test_result["status"] == "success":
            print("   ‚úÖ HTTP –ø—É–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif test_result["status"] == "warning":
            print(f"   ‚ö†Ô∏è HTTP –ø—É–ª: {', '.join(test_result['errors'])}")
        else:
            print(f"   ‚ùå HTTP –ø—É–ª: {', '.join(test_result['errors'])}")
    
    async def _test_concurrency(self):
        """Test concurrency manager."""
        print("‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é...")
        
        test_result = {
            "status": "success",
            "details": {},
            "errors": []
        }
        
        try:
            concurrency_mgr = get_concurrency_manager()
            
            # Check capacity
            capacity = await concurrency_mgr.get_capacity_status()
            test_result["details"]["ai_capacity"] = capacity.get("ai_requests", {})
            test_result["details"]["pdf_capacity"] = capacity.get("pdf_generation", {})
            
            # Check metrics
            metrics = await concurrency_mgr.get_metrics()
            test_result["details"]["ai_metrics"] = metrics.get("ai_requests", {})
            
            # Health check
            health = await concurrency_mgr.health_check()
            test_result["details"]["health"] = health
            
            if not health.get("overall_healthy", False):
                test_result["status"] = "warning"
                test_result["errors"].append("–ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
            
        except Exception as e:
            test_result["status"] = "error"
            test_result["errors"].append(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é: {e}")
        
        self.results["tests"]["concurrency"] = test_result
        
        if test_result["status"] == "success":
            print("   ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
        elif test_result["status"] == "warning":
            print(f"   ‚ö†Ô∏è –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: {', '.join(test_result['errors'])}")
        else:
            print(f"   ‚ùå –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: {', '.join(test_result['errors'])}")
    
    async def _test_api_connectivity(self):
        """Test OpenRouter API connectivity."""
        print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter API...")
        
        test_result = {
            "status": "success",
            "details": {},
            "errors": []
        }
        
        try:
            # Simple test request
            system_prompt = "You are a helpful assistant."
            user_prompt = "Say 'Hello, this is a test!' in Russian."
            
            start_time = asyncio.get_event_loop().time()
            response = await ask_openrouter(system_prompt, user_prompt, max_tokens=50)
            end_time = asyncio.get_event_loop().time()
            
            response_time = end_time - start_time
            test_result["details"]["response_time"] = f"{response_time:.2f}s"
            test_result["details"]["response_length"] = len(response)
            test_result["details"]["response_preview"] = response[:100] + "..." if len(response) > 100 else response
            
            # Check if response indicates an error
            if response.startswith("‚ùå"):
                test_result["status"] = "error"
                test_result["errors"].append(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response}")
            elif len(response) < 5:
                test_result["status"] = "warning"
                test_result["errors"].append("API –≤–µ—Ä–Ω—É–ª –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
            elif response_time > 30:
                test_result["status"] = "warning"
                test_result["errors"].append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API ({response_time:.1f}s)")
            
        except Exception as e:
            test_result["status"] = "error"
            test_result["errors"].append(f"–û—à–∏–±–∫–∞ API: {e}")
        
        self.results["tests"]["api_connectivity"] = test_result
        
        if test_result["status"] == "success":
            print(f"   ‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({test_result['details']['response_time']})")
        elif test_result["status"] == "warning":
            print(f"   ‚ö†Ô∏è API: {', '.join(test_result['errors'])}")
        else:
            print(f"   ‚ùå API: {', '.join(test_result['errors'])}")
    
    async def _test_end_to_end_analysis(self):
        """Test complete analysis pipeline."""
        print("üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...")
        
        test_result = {
            "status": "success",
            "details": {},
            "errors": []
        }
        
        try:
            # Create test profile
            test_name = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
            test_birthdate = "15.03.1990"
            
            # Calculate profile
            profile = calculate_core_profile(test_name, test_birthdate)
            test_result["details"]["profile_keys"] = list(profile.keys())
            
            # Test AI analysis
            start_time = asyncio.get_event_loop().time()
            analysis = await get_ai_analysis(profile)
            end_time = asyncio.get_event_loop().time()
            
            analysis_time = end_time - start_time
            test_result["details"]["analysis_time"] = f"{analysis_time:.2f}s"
            test_result["details"]["analysis_length"] = len(analysis)
            test_result["details"]["analysis_preview"] = analysis[:200] + "..." if len(analysis) > 200 else analysis
            
            # Check analysis quality
            if analysis.startswith("‚ùå") or analysis.startswith("‚ö†Ô∏è"):
                test_result["status"] = "error"
                test_result["errors"].append(f"–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É: {analysis[:100]}")
            elif len(analysis) < 50:
                test_result["status"] = "warning"
                test_result["errors"].append("–ê–Ω–∞–ª–∏–∑ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            elif analysis_time > 45:
                test_result["status"] = "warning"
                test_result["errors"].append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ({analysis_time:.1f}s)")
            
        except Exception as e:
            test_result["status"] = "error"
            test_result["errors"].append(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
        
        self.results["tests"]["end_to_end"] = test_result
        
        if test_result["status"] == "success":
            print(f"   ‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç ({test_result['details']['analysis_time']})")
        elif test_result["status"] == "warning":
            print(f"   ‚ö†Ô∏è –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: {', '.join(test_result['errors'])}")
        else:
            print(f"   ‚ùå –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: {', '.join(test_result['errors'])}")
    
    async def _test_performance(self):
        """Test performance under load."""
        print("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)...")
        
        test_result = {
            "status": "success",
            "details": {},
            "errors": []
        }
        
        try:
            # Create test profile
            test_name = "–¢–µ—Å—Ç –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            test_birthdate = "01.01.1985"
            profile = calculate_core_profile(test_name, test_birthdate)
            
            # Run 5 concurrent requests
            start_time = asyncio.get_event_loop().time()
            
            tasks = []
            for i in range(5):
                task = asyncio.create_task(get_ai_analysis(profile))
                tasks.append(task)
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            end_time = asyncio.get_event_loop().time()
            
            total_time = end_time - start_time
            test_result["details"]["total_time"] = f"{total_time:.2f}s"
            test_result["details"]["concurrent_requests"] = len(tasks)
            
            # Analyze results
            successful = 0
            failed = 0
            errors = []
            
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    failed += 1
                    errors.append(f"–ó–∞–ø—Ä–æ—Å {i+1}: {result}")
                elif isinstance(result, str) and (result.startswith("‚ùå") or result.startswith("‚ö†Ô∏è")):
                    failed += 1
                    errors.append(f"–ó–∞–ø—Ä–æ—Å {i+1}: {result[:50]}")
                else:
                    successful += 1
            
            test_result["details"]["successful"] = successful
            test_result["details"]["failed"] = failed
            test_result["details"]["success_rate"] = f"{successful/len(tasks)*100:.1f}%"
            
            if failed > 0:
                test_result["status"] = "warning" if successful > failed else "error"
                test_result["errors"] = errors[:3]  # Show first 3 errors
            
            if total_time > 60:  # More than 1 minute for 5 requests
                test_result["status"] = "warning"
                test_result["errors"].append(f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ({total_time:.1f}s)")
        
        except Exception as e:
            test_result["status"] = "error"
            test_result["errors"].append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        
        self.results["tests"]["performance"] = test_result
        
        if test_result["status"] == "success":
            print(f"   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {test_result['details']['success_rate']} —É—Å–ø–µ—à–Ω–æ ({test_result['details']['total_time']})")
        elif test_result["status"] == "warning":
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {', '.join(test_result['errors'][:2])}")
        else:
            print(f"   ‚ùå –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {', '.join(test_result['errors'][:2])}")
    
    def _generate_summary(self):
        """Generate overall diagnostics summary."""
        print("\n" + "=" * 60)
        print("üìä –°–í–û–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 60)
        
        error_count = 0
        warning_count = 0
        success_count = 0
        
        for test_name, test_result in self.results["tests"].items():
            status = test_result["status"]
            if status == "error":
                error_count += 1
            elif status == "warning":
                warning_count += 1
            else:
                success_count += 1
        
        total_tests = len(self.results["tests"])
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
        
        # Overall status
        if error_count > 0:
            self.results["overall_status"] = "error"
            print("\nüî¥ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI –∞–Ω–∞–ª–∏–∑–∞.")
        elif warning_count > 0:
            self.results["overall_status"] = "warning"
            print("\nüü° –û–ë–©–ò–ô –°–¢–ê–¢–£–°: –ß–ê–°–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
            print("AI –∞–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        else:
            self.results["overall_status"] = "success"
            print("\nüü¢ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢")
            print("AI –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # Recommendations
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if error_count > 0:
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env —Ñ–∞–π–ª–∞")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OPENROUTER_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Å—á–µ—Ç—É OpenRouter –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        
        if warning_count > 0:
            print("1. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            print("3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞")
        
        if error_count == 0 and warning_count == 0:
            print("1. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
            print("2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
            print("3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ")
    
    def save_report(self, filename: str):
        """Save diagnostics report to file."""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        print(f"\nüìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")


async def main():
    """Main diagnostics runner."""
    import argparse
    
    parser = argparse.ArgumentParser(description="AI System Diagnostics")
    parser.add_argument("--output", type=str, help="Save detailed report to file")
    parser.add_argument("--verbose", action="store_true", help="Verbose logging")
    
    args = parser.parse_args()
    
    # Configure logging
    level = logging.DEBUG if args.verbose else logging.WARNING
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Run diagnostics
    diagnostics = AIDiagnostics()
    
    try:
        results = await diagnostics.run_full_diagnostics()
        
        # Save report if requested
        if args.output:
            diagnostics.save_report(args.output)
        
        # Exit with appropriate code
        if results["overall_status"] == "error":
            sys.exit(1)
        elif results["overall_status"] == "warning":
            sys.exit(2)
        else:
            sys.exit(0)
            
    except KeyboardInterrupt:
        print("\nüõë –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())