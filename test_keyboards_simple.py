# test_keyboards_simple.py
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ Telegram.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def create_mock_btn(text):
    """–°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    class MockButton:
        def __init__(self, text):
            self.text = text
    return MockButton(text)


def create_mock_keyboard(buttons, resize_keyboard=True):
    """–°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    class MockKeyboard:
        def __init__(self, keyboard, resize_keyboard=True):
            self.keyboard = keyboard
            self.resize_keyboard = resize_keyboard
    return MockKeyboard(buttons, resize_keyboard)


def test_old_keyboard_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ä–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    # –≠—Ç–æ –∫–æ–ø–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ interface/menus.py
    buttons = [
        [create_mock_btn(" CORE "), create_mock_btn(" PARTNER ")],
        [create_mock_btn(" EXTENDED "), create_mock_btn(" BRIDGES ")],
        [create_mock_btn(" CYCLES "), create_mock_btn(" MONTHS ")],
        [create_mock_btn(" CALENDAR_DAYS ")],
        [create_mock_btn(" RESTART ")]
    ]
    return create_mock_keyboard(buttons)


def test_new_keyboard_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É StandardKeyboards.after_analysis_keyboard()
    buttons_data = [
        [" CORE ", " PARTNER "],
        [" EXTENDED ", " BRIDGES "],
        [" CYCLES ", " MONTHS "],
        [" CALENDAR_DAYS "],
        [" RESTART "]
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç KeyboardBuilder
    buttons = []
    for row_data in buttons_data:
        row = [create_mock_btn(text) for text in row_data]
        buttons.append(row)
    
    return create_mock_keyboard(buttons)


def compare_keyboards(old_kb, new_kb):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–≤–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    print("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤
    if len(old_kb.keyboard) != len(new_kb.keyboard):
        print(f"‚ùå –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤: {len(old_kb.keyboard)} vs {len(new_kb.keyboard)}")
        return False
    
    print(f"‚úÖ –û–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤: {len(old_kb.keyboard)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä—è–¥
    for i, (old_row, new_row) in enumerate(zip(old_kb.keyboard, new_kb.keyboard)):
        old_texts = [btn.text.strip() for btn in old_row]
        new_texts = [btn.text.strip() for btn in new_row]
        
        print(f"–†—è–¥ {i+1}:")
        print(f"  –°—Ç–∞—Ä—ã–π: {old_texts}")
        print(f"  –ù–æ–≤—ã–π:  {new_texts}")
        
        if old_texts != new_texts:
            print(f"  ‚ùå –†—è–¥ {i+1} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            return False
        else:
            print(f"  ‚úÖ –†—è–¥ {i+1} –∏–¥–µ–Ω—Ç–∏—á–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if old_kb.resize_keyboard != new_kb.resize_keyboard:
        print(f"‚ùå resize_keyboard –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {old_kb.resize_keyboard} vs {new_kb.resize_keyboard}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    return True


def test_keyboard_builder_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É KeyboardBuilder.create_reply_keyboard."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ KeyboardBuilder...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    from helpers.keyboards import KeyboardBuilder
    
    # –¢–µ—Å—Ç 1: –û–¥–∏–Ω–æ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons1 = ["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2", "–ö–Ω–æ–ø–∫–∞ 3"]
    kb1 = KeyboardBuilder.create_reply_keyboard(buttons1)
    
    expected1 = [["–ö–Ω–æ–ø–∫–∞ 1"], ["–ö–Ω–æ–ø–∫–∞ 2"], ["–ö–Ω–æ–ø–∫–∞ 3"]]
    actual1 = [[btn.text for btn in row] for row in kb1.keyboard]
    
    print(f"–¢–µ—Å—Ç 1 - –û–¥–∏–Ω–æ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:")
    print(f"  –û–∂–∏–¥–∞–µ–º: {expected1}")
    print(f"  –ü–æ–ª—É—á–∏–ª–∏: {actual1}")
    
    if expected1 == actual1:
        print("  ‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("  ‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 2: –†—è–¥—ã –∫–Ω–æ–ø–æ–∫
    buttons2 = [["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2"], ["–ö–Ω–æ–ø–∫–∞ 3", "–ö–Ω–æ–ø–∫–∞ 4"]]
    kb2 = KeyboardBuilder.create_reply_keyboard(buttons2)
    
    expected2 = [["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2"], ["–ö–Ω–æ–ø–∫–∞ 3", "–ö–Ω–æ–ø–∫–∞ 4"]]
    actual2 = [[btn.text for btn in row] for row in kb2.keyboard]
    
    print(f"–¢–µ—Å—Ç 2 - –†—è–¥—ã –∫–Ω–æ–ø–æ–∫:")
    print(f"  –û–∂–∏–¥–∞–µ–º: {expected2}")
    print(f"  –ü–æ–ª—É—á–∏–ª–∏: {actual2}")
    
    if expected2 == actual2:
        print("  ‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("  ‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("=" * 60)
    
    success = True
    
    try:
        # –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        print("–¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        old_kb = test_old_keyboard_structure()
        new_kb = test_new_keyboard_structure()
        
        if compare_keyboards(old_kb, new_kb):
            print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!")
        else:
            print("‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è!")
            success = False
        
        print("\n" + "-" * 60)
        
        # –¢–µ—Å—Ç 2: –õ–æ–≥–∏–∫–∞ KeyboardBuilder
        if test_keyboard_builder_logic():
            print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω - –ª–æ–≥–∏–∫–∞ KeyboardBuilder —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω - –ø—Ä–æ–±–ª–µ–º—ã —Å KeyboardBuilder!")
            success = False
        
        print("\n" + "=" * 60)
        if success:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        else:
            print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
            print("‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º")
            
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    return success


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)