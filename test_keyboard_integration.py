#!/usr/bin/env python3
# test_keyboard_integration.py
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –±–æ—Ç–µ.
–≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –±–æ—Ç–∞.
"""

import sys
import os
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –úock –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockUpdate:
    def __init__(self):
        self.effective_message = MockMessage()
        self.effective_chat = MockChat()

class MockMessage:
    def __init__(self):
        self.message_id = 12345
    
    async def reply_text(self, text, **kwargs):
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text[:50]}...")
        if 'reply_markup' in kwargs:
            keyboard = kwargs['reply_markup']
            print(f"   –° –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤")
        return MockMessage()

class MockChat:
    def __init__(self):
        self.id = 98765

class MockContext:
    def __init__(self):
        self.user_data = {
            "name": "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "birthdate": "01.01.1990",
            "core_profile": {
                "life_path": "1",
                "birthday": "1",
                "expression": "2",
                "soul": "3", 
                "personality": "4"
            }
        }

async def test_keyboard_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã."""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from helpers.keyboards import StandardKeyboards, KeyboardBuilder, KeyboardUtils
        from interface.menus import build_after_analysis_keyboard as old_keyboard
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ StandardKeyboards:")
        new_kb = StandardKeyboards.after_analysis_keyboard()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(new_kb.keyboard)} —Ä—è–¥–∞–º–∏")
        
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ KeyboardBuilder:")
        custom_kb = KeyboardBuilder.create_reply_keyboard([
            ["–¢–µ—Å—Ç 1", "–¢–µ—Å—Ç 2"],
            ["–¢–µ—Å—Ç 3"]
        ])
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(custom_kb.keyboard)} —Ä—è–¥–∞–º–∏")
        
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ KeyboardUtils:")
        grid_kb = KeyboardUtils.create_grid_keyboard(["A", "B", "C", "D"], columns=2)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(grid_kb.keyboard)} —Ä—è–¥–∞–º–∏")
        
        print("\n4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:")
        old_kb = old_keyboard()
        print(f"   ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(old_kb.keyboard)} —Ä—è–¥–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        old_structure = [[btn.text for btn in row] for row in old_kb.keyboard]
        new_structure = [[btn.text for btn in row] for row in new_kb.keyboard]
        
        if old_structure == new_structure:
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        else:
            print("   ‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è!")
            print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {old_structure}")
            print(f"   –ù–æ–≤–∞—è: {new_structure}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_keyboard_usage():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."""
    print("\nüß™ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...")
    
    try:
        from helpers.keyboards import StandardKeyboards
        from helpers.messages import M
        
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
        update = MockUpdate()
        context = MockContext()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = StandardKeyboards.after_analysis_keyboard()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        message_text = M.HINTS.NEXT_STEP
        print(f"üì§ –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: '{message_text}'")
        print(f"   –° –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for i, row in enumerate(keyboard.keyboard):
            buttons = [btn.text for btn in row]
            print(f"   –†—è–¥ {i+1}: {buttons}")
        
        print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_keyboard_aliases():
    """–¢–µ—Å—Ç –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    print("\nüß™ –¢–µ—Å—Ç –∞–ª–∏–∞—Å–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        # –¢–µ—Å—Ç –∞–ª–∏–∞—Å–∞ –¥–ª—è build_after_analysis_keyboard
        from helpers.keyboards import build_after_analysis_keyboard as new_alias
        from interface.menus import build_after_analysis_keyboard as old_function
        
        new_kb = new_alias()
        old_kb = old_function()
        
        new_structure = [[btn.text for btn in row] for row in new_kb.keyboard]
        old_structure = [[btn.text for btn in row] for row in old_kb.keyboard]
        
        if new_structure == old_structure:
            print("   ‚úÖ –ê–ª–∏–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            print("   ‚ùå –ê–ª–∏–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–ª–∏–∞—Å–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("=" * 50)
    
    success = True
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        success &= await test_keyboard_creation()
        success &= await test_keyboard_usage()
        success &= await test_keyboard_aliases()
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        else:
            print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
            print("‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    return success


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    result = asyncio.run(main())
    exit(0 if result else 1)