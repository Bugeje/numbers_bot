#!/usr/bin/env python3
# test_all_flows_keyboards.py
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤–æ –≤—Å–µ—Ö flow —Ñ–∞–π–ª–∞—Ö.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_flow_import(flow_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ flow —Ñ–∞–π–ª–∞."""
    print(f"üîç –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ {flow_name}...")
    
    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
        module = __import__(f"flows.{flow_name}", fromlist=[''])
        print(f"‚úÖ {flow_name} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True, module
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {flow_name}: {e}")
        import traceback
        traceback.print_exc()
        return False, None

def test_keyboard_in_flow(flow_module, flow_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º flow."""
    print(f"üîç –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ {flow_name}...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from helpers.keyboards import build_after_analysis_keyboard
        keyboard = build_after_analysis_keyboard()
        print(f"‚úÖ –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ {flow_name} —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ {flow_name}: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_all_flows():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ flow —Ñ–∞–π–ª—ã."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö flow —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ flow —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    flows_to_test = [
        "extended_flow",
        "bridges_flow",
        "profile_flow", 
        "cycles_flow",
        "partner_flow",
        "days_flow",
        "months_flow"
    ]
    
    results = {}
    overall_success = True
    
    for flow_name in flows_to_test:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {flow_name} ---")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
        import_success, module = test_flow_import(flow_name)
        results[flow_name] = {"import": import_success}
        
        if import_success and module:
            # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard_success = test_keyboard_in_flow(module, flow_name)
            results[flow_name]["keyboard"] = keyboard_success
            overall_success &= keyboard_success
        else:
            overall_success = False
            results[flow_name]["keyboard"] = False
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print("\n" + "=" * 50)
    print("üìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("-" * 30)
    
    for flow_name, result in results.items():
        import_status = "‚úÖ" if result["import"] else "‚ùå"
        keyboard_status = "‚úÖ" if result.get("keyboard", False) else "‚ùå"
        print(f"{flow_name:15} | –ò–º–ø–æ—Ä—Ç: {import_status} | –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard_status}")
    
    print("-" * 30)
    if overall_success:
        print("üéâ –í—Å–µ flow —Ñ–∞–π–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    else:
        print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ flow —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã!")
        print("‚ùå –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏")
    
    return overall_success

def test_backward_compatibility():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å."""
    print("\nüîç –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    try:
        # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
        from interface.menus import build_after_analysis_keyboard as old_way
        old_keyboard = old_way()
        
        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± (–∞–ª–∏–∞—Å)
        from helpers.keyboards import build_after_analysis_keyboard as new_way
        new_keyboard = new_way()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        old_structure = [[btn.text for btn in row] for row in old_keyboard.keyboard]
        new_structure = [[btn.text for btn in row] for row in new_keyboard.keyboard]
        
        if old_structure == new_structure:
            print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            return True
        else:
            print("‚ùå –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∞!")
            print(f"–°—Ç–∞—Ä–∞—è: {old_structure}")
            print(f"–ù–æ–≤–∞—è: {new_structure}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("=" * 60)
    
    success = True
    
    try:
        # –¢–µ—Å—Ç –≤—Å–µ—Ö flow —Ñ–∞–π–ª–æ–≤
        success &= test_all_flows()
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        success &= test_backward_compatibility()
        
        print("\n" + "=" * 60)
        if success:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –≤–Ω–µ–¥—Ä–µ–Ω–∏—è")
            print("üìã –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –í–Ω–µ–¥—Ä–µ–Ω–∏–µ DataValidator –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
            print("‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    return success

if __name__ == "__main__":
    result = main()
    exit(0 if result else 1)